package NettyDemo.bonree.service;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.ByteBufAllocator;
import io.netty.buffer.ByteBufUtil;
import io.netty.buffer.CompositeByteBuf;
import io.netty.buffer.Unpooled;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.SimpleChannelInboundHandler;
import io.netty.handler.codec.http.DefaultFullHttpRequest;
import io.netty.handler.codec.http.DefaultFullHttpResponse;
import io.netty.handler.codec.http.HttpResponseStatus;
import io.netty.handler.codec.http.HttpVersion;
import java.util.ArrayList;
import java.util.List;

import org.apache.http.nio.util.HeapByteBufferAllocator;
import org.ietf.jgss.ChannelBinding;

import NettyDemo.bonree.DAO.QueryTestResultDAO;
import NettyDemo.bonree.protobuf.tasks.PBMBTaskResult.PB_MBTaskResult;
import NettyDemo.bonree.protobuf.tasks.PBTaskRequest.PB_TaskRequest;

public class MBResultHander extends SimpleChannelInboundHandler<Object>{
	@Override
	protected void channelRead0(ChannelHandlerContext ctx,	Object msg) throws Exception {
		DefaultFullHttpRequest request=(DefaultFullHttpRequest)msg;
		PB_TaskRequest task=PB_TaskRequest.parseFrom(request.content().array());
		MbResultService service = new MbResultService();
		List<String> taskList = new ArrayList<String>();
		taskList.addAll(task.getTaskIdList());
		PB_MBTaskResult.Builder mbTaskbuilder = PB_MBTaskResult.newBuilder();
		mbTaskbuilder.addAllNetenvResult(service.getNetData(taskList));
		mbTaskbuilder.addAllNavigateResult(service.getNavData(taskList));
		ByteBuf content=Unpooled.copiedBuffer(mbTaskbuilder.build().toByteArray());
		DefaultFullHttpResponse response=new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.ACCEPTED, content);
		
		ctx.writeAndFlush(response);
	}
}
