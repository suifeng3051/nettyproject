package NettyDemo.echo.client;

import io.netty.bootstrap.Bootstrap;
import io.netty.channel.Channel;
import io.netty.channel.ChannelInitializer;
import io.netty.channel.ChannelOption;
import io.netty.channel.ChannelPipeline;
import io.netty.channel.EventLoopGroup;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.nio.NioSocketChannel;
import io.netty.handler.codec.http.HttpRequestEncoder;
import io.netty.handler.codec.http.HttpResponseDecoder;
import NettyDemo.echo.handler.HttpProtobufClientHandler;
import NettyDemo.echo.protocal.AddressBookProtos;
import NettyDemo.echo.server.HttpProtobufServer;

import com.google.protobuf.MessageLite;

public class HttpProtobufClient {
	public static String HOST = "127.0.0.1";

	public static Bootstrap bootstrap = getBootstrap();
	public static Channel channel = getChannel(HOST, HttpProtobufServer.PORT);

	public static MessageLite lite;

	/**
	 * 初始化Bootstrap
	 * 
	 * @return
	 */
	public static final Bootstrap getBootstrap() {
		EventLoopGroup group = new NioEventLoopGroup();
		Bootstrap b = new Bootstrap();
		b.group(group).channel(NioSocketChannel.class);
		b.handler(new ChannelInitializer<Channel>() {
			@Override
			protected void initChannel(Channel ch) throws Exception {
				ChannelPipeline pipeline = ch.pipeline();

				pipeline.addLast("encoder", new HttpRequestEncoder());
//				pipeline.addLast("protoEncoder", new ProtobufEncoder());

				// pipeline.addLast(new
				// ProtobufDecoder(AddressBookProtos.AddressBook.getDefaultInstance()));
				 pipeline.addLast("decoder", new HttpResponseDecoder());
				// pipeline.addLast("protoDecoder", new ProtobufDecoder(lite));

				pipeline.addLast("handler", new HttpProtobufClientHandler());
			}
		});
		b.option(ChannelOption.SO_KEEPALIVE, true);
		return b;
	}

	public static final Channel getChannel(String host, int port) {
		Channel channel = null;
		try {
			channel = bootstrap.connect(host, port).sync().channel();
		} catch (Exception e) {
			System.out.println("连接Server(IP[%s],PORT[%s])");
			return null;
		}
		return channel;
	}

	public static void sendMsg(Object request) throws Exception {
		if (channel != null) {
			channel.writeAndFlush(request).sync();
		} else {
			System.out.println("消息发送失败,连接尚未建立!");
		}
	}

	public static void main(String[] args) throws Exception {
		try {
			AddressBookProtos.AddressBook.Builder address = AddressBookProtos.AddressBook
					.newBuilder();

			AddressBookProtos.Person.Builder person = AddressBookProtos.Person
					.newBuilder();
			
			StringBuilder sb = new StringBuilder();
			for (int i = 0; i < 10; i++) {
				sb.append("aaaaaaaaaaaaaaaaaa");

			}
			person.setName(sb.toString());
			person.setId(1);
			person.setEmail("wanghouda@126.com");

			address.addPerson(person);
			HttpProtobufClient.sendMsg(address.build());
			

		} catch (Exception e) {

			e.printStackTrace();
		}
	}
}
